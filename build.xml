<?xml version="1.0" ?>
<project name="TranslateActivity" default="release">
    <!-- SDK Locations -->
    <property name="sdk-folder" value="${basedir}/sdk" />
    <property name="android-tools" value="${sdk-folder}/tools" />
    <property name="project-dir" value="${basedir}/project" />
	
    <!-- Application Package Name -->
    <property name="application-package" value="com.commaping.android.controller" />


    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="out-dir" value="app-build" />
    
    <!-- ************************************************************************************* -->
    <!-- No user servicable parts below. -->


    <property name="android-framework" value="${android-tools}/lib/framework.aidl" />


    <!-- Input directories -->
    <property name="resource-dir" value="${project-dir}/res" />
    <property name="asset-dir" value="${project-dir}/assets" />
    <property name="src-dir" value="${project-dir}/src" />    

    <property name="external-libs" value="${android-tools}/lib" />

    <!-- Output directories -->
    <property name="out-dir-classes" value="${out-dir}/classes" />

    <!-- Create R.java in the source directory -->
    <property name="out-dir-r" value="${src-dir}" />


    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${basedir}/${out-dir}/${dex-file}" />

    <!-- The final package file to generate -->
    <property name="resources-package" value="${basedir}/${out-dir}/${ant.project.name}.ap_" />

    <property name="out-debug-package" value="${basedir}/${out-dir}/${ant.project.name}-debug.apk" />

    <property name="out-unsigned-package" value="${basedir}/${out-dir}/${ant.project.name}-unsigned.apk" />

    <!-- Tools -->
    <condition property="aapt" value="${android-tools}/aapt.exe" else="${android-tools}/aapt" >
        <os family="windows"/>
    </condition>
    <condition property="aidl" value="${android-tools}/aidl.exe" else="${android-tools}/aidl" >
        <os family="windows"/>
    </condition>
    <condition property="adb" value="${android-tools}/adb.exe" else="${android-tools}/adb" >
        <os family="windows"/>
    </condition>
    <condition property="dx" value="${android-tools}/dx.bat" else="${android-tools}/dx" >
        <os family="windows"/>
    </condition>
    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
        <os family="windows"/>
    </condition>


    <property name="android-jar" value="${sdk-folder}/android.jar" />


    <!-- Rules -->


    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${out-dir}" />
        <mkdir dir="${out-dir-classes}" />
    </target>


    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${out-dir-r}" />
            <arg value="-M" />
            <arg value="${project-dir}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>


    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <echo>Compiling aidl files into Java classes...</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android-framework}" />
            <arg value="-I${src-dir}" />
            <fileset dir="${src-dir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>


    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src, aidl">
		<echo>${android-jar}</echo>
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="${src-dir}"
                destdir="${out-dir-classes}"
                bootclasspath="${android-jar}">
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar"/>
            </classpath>
         </javac>
    </target>


    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${out-dir}/${dex-file}...</echo>
    	<echo>${dx}</echo>
        <apply executable="${dx}" failonerror="true" parallel="false">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex}" />
            <arg path="${out-dir-classes}" />
            <fileset dir="${external-libs}" includes="*.jar"/>	
        </apply>
    </target>


    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="${project-dir}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>


    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="${project-dir}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>


    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>


    <!-- Package the application and sign it with a debug key.
                 This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex, package-res">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package}" />
            <arg value="-z" />
            <arg value="${resources-package}" />
            <arg value="-f" />
            <arg value="${intermediate-dex}" />
            <arg value="-rf" />
            <arg value="${src-dir}" />
            <arg value="-rj" />
            <arg value="${external-libs}" />
        </exec>
    </target>


    <!-- Package the application without signing it.
         This allows for the application to be signed later with an official publishing key. -->
    <target name="release" depends="dex, package-res">
        <echo>Packaging ${out-unsigned-package} for release...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-unsigned-package}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${resources-package}" />
            <arg value="-f" />
            <arg value="${intermediate-dex}" />
            <arg value="-rf" />
            <arg value="${src-dir}" />
            <arg value="-rj" />
            <arg value="${external-libs}" />
        </exec>
        <echo>It will need to be signed with jarsigner before being published.</echo>
    </target>


    <!-- Install the package on the default emulator -->
    <target name="install" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>


    <target name="reinstall" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>


    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>


</project>